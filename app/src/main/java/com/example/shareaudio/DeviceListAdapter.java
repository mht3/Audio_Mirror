package com.example.shareaudio;

import android.annotation.SuppressLint;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;

import java.util.ArrayList;

/**
 * DeviceListAdapter is responsible for creating a custom view that is applied to the different textViews
 * we have in activity_main.xml. It uses device_adapter_view.xml and then inflates it to fill the list.
 */
public class DeviceListAdapter extends ArrayAdapter<BluetoothDevice> {

    /**
     * The LayoutInflater is provided by Java and is what takes our device_adapter_view.xml and prepares
     * it to populate the different listViews.
     */
    private LayoutInflater mLayoutInflater;

    /**
     * The ArrayList of BluetoothDevices is not set here, but is initialized in the constructor.
     * This list is what eventually will be passed to the device_adapter_view.xml and then appear in
     * the listView.
     */
    private ArrayList<BluetoothDevice> mDevices;

    /**
     * This ID is a call to the device_adapter_view.xml file.
     */
    private int  mViewResourceId;

    /**
     * The constructor for DeviceListAdapter. Assigns the previously created variables values.
     * @param context - the context in which the adapter will be created.
     * @param tvResourceId - the ID of the device_adapter_view.xml.
     * @param devices - an Array of Bluetooth devices that is generated by MainActivity.java.
     */
    public DeviceListAdapter(Context context, int tvResourceId, ArrayList<BluetoothDevice> devices){
        super(context, tvResourceId,devices);
        this.mDevices = devices;
        mLayoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        mViewResourceId = tvResourceId;
    }

    /**
     * Creates the custom view that is passed to the listView in activity_main.xml. Gets the name and
     * address of each Bluetooth device in the array and assigns them to an individual instance of
     * device_adapter_view.xml, which is then inflated to fill the listView. If the device has a readable
     * name, it is prioritized, however if only the address is present, it is displayed instead.
     * @param position - The position of the item within the adapter's data set of the item whose view we want.
     * @param convertView - The old view to reuse, if possible. Note: You should check that this view is non-null
     *                    and of an appropriate type before using. If it is not possible to convert this
     *                    view to display the correct data, this method can create a new view. Heterogeneous
     *                    lists can specify their number of view types, so that this View is always of the
     *                    right type (see getViewTypeCount() and getItemViewType(int)).
     * @param parent - The parent that this view will eventually be attached to
     * @return - A View corresponding to the data at the specified position.
     */
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View vi = convertView;
        BluetoothDevice device = mDevices.get(position);
        if (vi == null) {
            vi = mLayoutInflater.inflate(R.layout.device_adapter_view, null);
        }
        TextView deviceName = vi.findViewById(R.id.deviceName);
        deviceName.setText(device.getAddress());
        if (!(device.getName() == null || device.getName().length() == 0)) {
            deviceName.setText(device.getName());
        }
        return vi;
    }
}
